{"version":3,"sources":["HighScore.js","Application.js","serviceWorker.js","index.js"],"names":["HighScore","this","props","overTen","onClick","onReset","Component","Application","handleClick","num","state","sign","number1","setState","number2","handleSign","result","console","log","cancel","resetCout","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mOAkBeA,E,iLAZP,OAAGC,KAAKC,MAAMC,QAEN,2CACI,4BAAQC,QAASH,KAAKC,MAAMG,SAA5B,UAID,S,GAXKC,aC0GTC,G,kBAtGX,WAAYL,GAAO,IAAD,8BACd,4CAAMA,KAUVM,YAAc,SAACN,GAEP,IAAIO,EAIAA,EALc,MAAnB,EAAKC,MAAMC,MAEVF,EAAyB,GAAnB,EAAKC,MAAME,QAAaV,EAC9B,EAAKW,SAAS,CAACD,QAASH,MAGxBA,EAAyB,GAAnB,EAAKC,MAAMI,QAAaZ,EAC9B,EAAKW,SAAS,CAACC,QAASL,MAnBd,EAuBlBM,WAAa,SAACb,GACV,EAAKW,SAAS,CAACF,KAAM,OAxBP,EA2BlBK,OAAS,SAACd,GACN,IAAIO,EACJA,EAAM,EAAKC,MAAME,QAAU,EAAKF,MAAMI,QACtCG,QAAQC,IAAI,EAAKN,SACjB,EAAKC,SAAS,CAACG,OAAQP,KA/BT,EAkClBU,OAAS,SAACjB,GACN,EAAKW,SAAS,CACVD,QAAS,KACTE,QAAS,KACTE,OAAQ,EACRL,KAAM,QApCV,EAAKD,MAAQ,CACTE,QAAS,KACTE,QAAS,KACTE,OAAQ,EACRL,KAAM,MAPI,E,sEAsDT,IAAD,OACCK,EAAUf,KAAKS,MAAfM,OACAJ,EAAWX,KAAKS,MAAhBE,QACAE,EAAWb,KAAKS,MAAhBI,QACAH,EAAQV,KAAKS,MAAbC,KAEL,OACI,6BACI,2CACA,gCAAMC,EAASD,EAAMG,GACrB,kBAAC,EAAD,CACIX,QAASF,KAAKS,MAAMP,QACpBE,QAASJ,KAAKmB,YAElB,8BACI,6BACI,4BAAQhB,QAAS,kBAAM,EAAKI,YAAY,KAAxC,KACA,4BAAQJ,QAAS,kBAAM,EAAKI,YAAY,KAAxC,KACA,4BAAQJ,QAAS,kBAAM,EAAKI,YAAY,KAAxC,MAEJ,6BACI,4BAAQJ,QAAS,kBAAM,EAAKI,YAAY,KAAxC,KACA,4BAAQJ,QAAS,kBAAM,EAAKI,YAAY,KAAxC,KACA,4BAAQJ,QAAS,kBAAM,EAAKI,YAAY,KAAxC,MAEJ,6BACI,4BAAQJ,QAAS,kBAAM,EAAKI,YAAY,KAAxC,KACA,4BAAQJ,QAAS,kBAAM,EAAKI,YAAY,KAAxC,KACA,4BAAQJ,QAAS,kBAAM,EAAKI,YAAY,KAAxC,MAGJ,6BACI,4BAAQJ,QAAS,kBAAM,EAAKI,YAAY,KAAxC,KACA,4BAAQJ,QAAS,kBAAM,EAAKW,eAA5B,KACA,4BAAQX,QAAS,kBAAM,EAAKY,WAA5B,MAEJ,6BACI,4BAAQZ,QAAS,kBAAM,EAAKe,WAA5B,YAIR,wCAAcH,EAAd,U,GAhGUV,cCONe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAiBC,SAASC,eAAe,SD2HnD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.cf18483c.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass HighScore extends Component {\n    \n    render(){\n\n        if(this.props.overTen){\n            return (\n                <h3>You beat 10!\n                    <button onClick={this.props.onReset}>Reset</button>\n                </h3> \n            )\n        } else {\n            return null;\n        }\n    }\n}\n\nexport default HighScore;","import React, {Component} from 'react';\nimport HighScore from './HighScore';\nimport './css/style.css';\n\n\nclass Application extends Component {\n    constructor(props){\n        super(props);\n\n        this.state = {\n            number1: null,\n            number2: null,\n            result: 0,\n            sign: null,\n        }\n    }\n\n    handleClick = (props) => {\n        if(this.state.sign == null){\n            let num;\n            num = this.state.number1*10 + props;\n            this.setState({number1: num});\n        } else {\n            let num;\n            num = this.state.number2*10 + props;\n            this.setState({number2: num});\n        }\n    }\n\n    handleSign = (props) => {\n        this.setState({sign: '+'})\n    }\n\n    result = (props) => {\n        let num;\n        num = this.state.number1 + this.state.number2;\n        console.log(this.number1);\n        this.setState({result: num})\n    }\n\n    cancel = (props) => {\n        this.setState({\n            number1: null,\n            number2: null,\n            result: 0,\n            sign: null,})\n    };\n\n    // componentDidUpdate(props, state){\n    //     if(this.state.count > 3 && this.state.count !== state.count && !this.state.overTen)\n    //     this.setState({overTen: true})\n    // }\n\n    // resetCout = (e) => {\n    //     this.setState({\n    //         count:0,\n    //         overTen: false,\n    //     });\n    // }\n\n    render(){\n        let {result} = this.state;\n        let {number1} = this.state;\n        let {number2} = this.state;\n        let {sign} = this.state;\n\n        return (\n            <div>\n                <h1> Calculator</h1>\n                <h2>`{number1}{sign}{number2}</h2>\n                <HighScore \n                    overTen={this.state.overTen}\n                    onReset={this.resetCout}\n                />\n                <span>\n                    <div>\n                        <button onClick={() => this.handleClick(1)}>1</button>\n                        <button onClick={() => this.handleClick(2)}>2</button>\n                        <button onClick={() => this.handleClick(3)}>3</button>\n                    </div>\n                    <div>\n                        <button onClick={() => this.handleClick(4)}>4</button>\n                        <button onClick={() => this.handleClick(5)}>5</button>\n                        <button onClick={() => this.handleClick(6)}>6</button>\n                    </div>\n                    <div>\n                        <button onClick={() => this.handleClick(7)}>7</button>\n                        <button onClick={() => this.handleClick(8)}>8</button>\n                        <button onClick={() => this.handleClick(9)}>9</button>\n                    </div>\n\n                    <div>\n                        <button onClick={() => this.handleClick(0)}>0</button>\n                        <button onClick={() => this.handleSign()}>+</button>\n                        <button onClick={() => this.result()}>=</button>\n                    </div>\n                    <div>\n                        <button onClick={() => this.cancel()}>Cancel</button>\n                   </div>\n                </span>\n\n                <h1> Result: {result} </h1>\n            </div>\n\n        );\n    }\n}\n\nexport default Application;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Application from './Application';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Application />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}